swagger: "2.0"
info:
  title: "User Management API"
  description: "API for managing user records"
  version: "1.0.0"

host: "localhost:5000"
schemes:
  - "http"

paths:
  /api/users:
    get:
      summary: "Get paginated and searchable list of users"
      description: "Returns a paginated list of users with optional search and sorting"
      parameters:
        - name: "page"
          in: "query"
          type: "integer"
          default: 1
        - name: "limit"
          in: "query"
          type: "integer"
          default: 5
        - name: "search"
          in: "query"
          type: "string"
          description: "Search by first or last name"
        - name: "sort"
          in: "query"
          type: "string"
          default: "id"
          description: "Sorting field (-field for descending order)"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              page:
                type: "integer"
              limit:
                type: "integer"
              users:
                type: "array"
                items:
                  $ref: "#/definitions/User"
        500:
          description: "Server error"

  /api/users/{id}:
    get:
      summary: "Get a user by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "User found"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
        500:
          description: "Server error"

    put:
      summary: "Update a user by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated successfully"
        400:
          description: "Invalid input"
        404:
          description: "User not found"
        500:
          description: "Server error"

    delete:
      summary: "Delete a user by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "User deleted successfully"
        404:
          description: "User not found"
        500:
          description: "Server error"

  /api/users/summary:
    get:
      summary: "Get a summary of user data"
      description: "Returns total user count, users by city, and average age"
      responses:
        200:
          description: "Summary retrieved successfully"
          schema:
            type: "object"
            properties:
              total_users:
                type: "integer"
              average_age:
                type: "number"
              users_by_city:
                type: "array"
                items:
                  type: "object"
                  properties:
                    city:
                      type: "string"
                    count:
                      type: "integer"
        500:
          description: "Server error"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      first_name:
        type: "string"
      last_name:
        type: "string"
      company_name:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zip:
        type: "string"
      email:
        type: "string"
      web:
        type: "string"
      age:
        type: "integer"
